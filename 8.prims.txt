#include <iostream>
#include <climits>
using namespace std;

#define MAX 10

class WeightedGraph
{
    int
        V,
        parent[MAX],
        graph[MAX][MAX];

public:
    WeightedGraph()
    {
        for (int i = 0; i < MAX; i++)
        {
            parent[i] = 0;
        }
        for (int i = 0; i < MAX; i++)
        {
            for (int j = 0; j < MAX; j++)
            {
                graph[i][j] = 0;
            }
        }
    }

    void takeInput()
    {
        cout << "Enter the number of process \n";
        cin >> V;
        cout << "Enter the number of edges between two process which should be greater than or equal to number of process \n";
        int e;
        cin >> e;
        for (int i = 0; i < e; i++)
        {
            cout << "Enter the two process and the time taken between them \n";
            int first, second, weight;
            cin >> first >> second >> weight;
            graph[first][second] = weight;
            graph[second][first] = weight;
        }
    }
    int minKey(int key[], bool mstSet[])
    {
        int min = INT_MAX, min_index;

        for (int v = 0; v < V; v++)
            if (mstSet[v] == false && key[v] < min)
                min = key[v], min_index = v;

        return min_index;
    }

    void printMST(int parent[])
    {
        cout << "Edge \tWeight\n";
        for (int i = 1; i < V; i++)
            cout << parent[i] << " - " << i << " \t" << graph[i][parent[i]] << " \n";
    }

    void primMST()
    {
        int parent[V];

        int key[V];

        bool mstSet[V];

        for (int i = 0; i < V; i++)
            key[i] = INT_MAX, mstSet[i] = false;

        key[0] = 0;
        parent[0] = -1;

        for (int count = 0; count < V - 1; count++)
        {

            int u = minKey(key, mstSet);

            mstSet[u] = true;

            for (int v = 0; v < V; v++)

                if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v])
                    parent[v] = u, key[v] = graph[u][v];
        }

        printMST(parent);
    }
};

int main()
{

    WeightedGraph g;

    g.takeInput();

    g.primMST();

    return 0;
}
